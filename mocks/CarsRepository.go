// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model "server/infrastructure/model"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// CarsRepository is an autogenerated mock type for the CarsRepository type
type CarsRepository struct {
	mock.Mock
}

// DeleteOneCar provides a mock function with given fields: carID
func (_m *CarsRepository) DeleteOneCar(carID primitive.ObjectID) (primitive.ObjectID, error) {
	ret := _m.Called(carID)

	var r0 primitive.ObjectID
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) primitive.ObjectID); ok {
		r0 = rf(carID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(primitive.ObjectID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(carID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCars provides a mock function with given fields:
func (_m *CarsRepository) GetAllCars() (*[]model.Car, error) {
	ret := _m.Called()

	var r0 *[]model.Car
	if rf, ok := ret.Get(0).(func() *[]model.Car); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Car)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneCar provides a mock function with given fields: carID
func (_m *CarsRepository) GetOneCar(carID primitive.ObjectID) (*model.Car, error) {
	ret := _m.Called(carID)

	var r0 *model.Car
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *model.Car); ok {
		r0 = rf(carID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Car)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(carID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOneCar provides a mock function with given fields: car
func (_m *CarsRepository) InsertOneCar(car *model.Car) (*mongo.InsertOneResult, error) {
	ret := _m.Called(car)

	var r0 *mongo.InsertOneResult
	if rf, ok := ret.Get(0).(func(*model.Car) *mongo.InsertOneResult); ok {
		r0 = rf(car)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Car) error); ok {
		r1 = rf(car)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOneCar provides a mock function with given fields: cars
func (_m *CarsRepository) UpdateOneCar(cars *model.Car) (*mongo.UpdateResult, error) {
	ret := _m.Called(cars)

	var r0 *mongo.UpdateResult
	if rf, ok := ret.Get(0).(func(*model.Car) *mongo.UpdateResult); ok {
		r0 = rf(cars)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Car) error); ok {
		r1 = rf(cars)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
